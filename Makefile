#############################################################################
##  v      #                   The hoq Proof Assistant                     ##
## <O___,, #                INRIA - CNRS - LIX - LRI - PPS                 ##
##   \VV/  #                                                               ##
##    //   #  Makefile automagically generated by hoq_makefile V8.6        ##
#############################################################################

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

#
# This Makefile was generated by the command line :
# hoq_makefile -f Make -o Makefile 
#

.DEFAULT_GOAL := all

# This Makefile may take arguments passed as environment variables:
# hoqBIN to specify the directory where hoq binaries resides;
# TIMECMD set a command to log .v compilation time;
# TIMED if non empty, use the default time command as TIMECMD;
# ZDEBUG/hoqDEBUG to specify debug flags for ocamlc&ocamlopt/hoqc;
# DSTROOT to specify a prefix to install path.
# VERBOSE to disable the short display of compilation rules.

VERBOSE?=
SHOW := $(if $(VERBOSE),@true "",@echo "")
HIDE := $(if $(VERBOSE),,@)

# Here is a hack to make $(eval $(shell works:
define donewline


endef
includecmdwithout@ = $(eval $(subst @,$(donewline),$(shell { $(1) | tr -d '\r' | tr '\n' '@'; })))
$(call includecmdwithout@,$(hoqBIN)hoqtop -config)

TIMED?=
TIMECMD?=
STDTIME?=/usr/bin/time -f "$* (user: %U mem: %M ko)"
TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))

vo_to_obj = $(addsuffix .o,\
  $(filter-out Warning: Error:,\
  $(shell $(hoqBIN)hoqtop -q -noinit -batch -quiet -print-mod-uid $(1))))

##########################
#                        #
# Libraries definitions. #
#                        #
##########################

hoqLIBS?=\
  -R "src" HIT
hoqCHKLIBS?=\
  -R "src" HIT
hoqDOCLIBS?=\
  -R "src" HIT

##########################
#                        #
# Variables definitions. #
#                        #
##########################


OPT?=
hoqDEP?="$(hoqBIN)hoqdep" -c
hoqFLAGS?=-q $(OPT) $(hoqLIBS) $(OTHERFLAGS) $(hoq_XML)
hoqCHKFLAGS?=-silent -o
hoqDOCFLAGS?=-interpolate -utf8
hoqC?=$(TIMER) "$(hoqBIN)hoqc"
GALLINA?="$(hoqBIN)gallina"
hoqDOC?="$(hoqBIN)hoqdoc"
hoqCHK?="$(hoqBIN)hoqchk"
hoqMKTOP?="$(hoqBIN)hoqmktop"

##################
#                #
# Install Paths. #
#                #
##################

ifdef USERINSTALL
XDG_DATA_HOME?="$(HOME)/.local/share"
hoqLIBINSTALL=$(XDG_DATA_HOME)/hoq
hoqDOCINSTALL=$(XDG_DATA_HOME)/doc/hoq
else
hoqLIBINSTALL="${hoqLIB}user-contrib"
hoqDOCINSTALL="${DOCDIR}user-contrib"
hoqTOPINSTALL="${hoqLIB}toploop"
endif

######################
#                    #
# Files dispatching. #
#                    #
######################

VFILES:=src/Ch01.v\
  src/Ch02.v\
  src/Ch03.v\
  src/Ch04.v\
  src/Ch05.v\
  src/Ch06.v\
  src/Ch07.v\
  src/Ch08.v\
  src/Ch09.v\
  src/Ch10.v

ifneq ($(filter-out archclean clean cleanall printenv,$(MAKECMDGOALS)),)
-include $(addsuffix .d,$(VFILES))
else
ifeq ($(MAKECMDGOALS),)
-include $(addsuffix .d,$(VFILES))
endif
endif

.SECONDARY: $(addsuffix .d,$(VFILES))

VO=vo
VOFILES:=$(VFILES:.v=.$(VO))
VOFILES0=$(patsubst src/%,%,$(filter src/%,$(VOFILES)))
GLOBFILES:=$(VFILES:.v=.glob)
GFILES:=$(VFILES:.v=.g)
HTMLFILES:=$(VFILES:.v=.html)
GHTMLFILES:=$(VFILES:.v=.g.html)
OBJFILES=$(call vo_to_obj,$(VOFILES))
ALLNATIVEFILES=$(OBJFILES:.o=.cmi) $(OBJFILES:.o=.cmo) $(OBJFILES:.o=.cmx) $(OBJFILES:.o=.cmxs)
NATIVEFILES=$(foreach f, $(ALLNATIVEFILES), $(wildcard $f))
NATIVEFILES0=$(patsubst src/%,%,$(filter src/%,$(NATIVEFILES)))
ifeq '$(HASNATDYNLINK)' 'true'
HASNATDYNLINK_OR_EMPTY := yes
else
HASNATDYNLINK_OR_EMPTY :=
endif

#######################################
#                                     #
# Definition of the toplevel targets. #
#                                     #
#######################################

all: $(VOFILES) 

quick: $(VOFILES:.vo=.vio)

vio2vo:
	$(hoqC) $(hoqDEBUG) $(hoqFLAGS) -schedule-vio2vo $(J) $(VOFILES:%.vo=%.vio)
checkproofs:
	$(hoqC) $(hoqDEBUG) $(hoqFLAGS) -schedule-vio-checking $(J) $(VOFILES:%.vo=%.vio)
gallina: $(GFILES)

html: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(hoqDOC) -toc $(hoqDOCFLAGS) -html $(hoqDOCLIBS) -d html $(VFILES)

gallinahtml: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(hoqDOC) -toc $(hoqDOCFLAGS) -html -g $(hoqDOCLIBS) -d html $(VFILES)

all.ps: $(VFILES)
	$(hoqDOC) -toc $(hoqDOCFLAGS) -ps $(hoqDOCLIBS) -o $@ `$(hoqDEP) -sort -suffix .v $^`

all-gal.ps: $(VFILES)
	$(hoqDOC) -toc $(hoqDOCFLAGS) -ps -g $(hoqDOCLIBS) -o $@ `$(hoqDEP) -sort -suffix .v $^`

all.pdf: $(VFILES)
	$(hoqDOC) -toc $(hoqDOCFLAGS) -pdf $(hoqDOCLIBS) -o $@ `$(hoqDEP) -sort -suffix .v $^`

all-gal.pdf: $(VFILES)
	$(hoqDOC) -toc $(hoqDOCFLAGS) -pdf -g $(hoqDOCLIBS) -o $@ `$(hoqDEP) -sort -suffix .v $^`

validate: $(VOFILES)
	$(hoqCHK) $(hoqCHKFLAGS) $(hoqCHKLIBS) $(notdir $(^:.vo=))

beautify: $(VFILES:=.beautified)
	for file in $^; do mv $${file%.beautified} $${file%beautified}old && mv $${file} $${file%.beautified}; done
	@echo 'Do not do "make clean" until you are sure that everything went well!'
	@echo 'If there were a problem, execute "for file in $$(find . -name \*.v.old -print); do mv $${file} $${file%.old}; done" in your shell/'

.PHONY: all archclean beautify byte clean cleanall gallina gallinahtml html install install-doc install-natdynlink install-toploop opt printenv quick uninstall userinstall validate vio2vo

####################
#                  #
# Special targets. #
#                  #
####################

byte:
	$(MAKE) all "OPT:=-byte"

opt:
	$(MAKE) all "OPT:=-opt"

userinstall:
	+$(MAKE) USERINSTALL=true install

install:
	cd "src" && for i in $(NATIVEFILES0) $(GLOBFILES0) $(VFILES0) $(VOFILES0); do \
	 install -d "`dirname "$(DSTROOT)"$(hoqLIBINSTALL)/HIT/$$i`"; \
	 install -m 0644 $$i "$(DSTROOT)"$(hoqLIBINSTALL)/HIT/$$i; \
	done

install-doc:
	install -d "$(DSTROOT)"$(hoqDOCINSTALL)/HIT/html
	for i in html/*; do \
	 install -m 0644 $$i "$(DSTROOT)"$(hoqDOCINSTALL)/HIT/$$i;\
	done

uninstall_me.sh: Makefile
	echo '#!/bin/sh' > $@
	printf 'cd "$${DSTROOT}"$(hoqLIBINSTALL)/HIT && rm -f $(NATIVEFILES0) $(GLOBFILES0) $(VFILES0) $(VOFILES0) && find . -type d -and -empty -delete\ncd "$${DSTROOT}"$(hoqLIBINSTALL) && find "HIT" -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(hoqDOCINSTALL)/HIT \\\n' >> "$@"
	printf '&& rm -f $(shell find "html" -maxdepth 1 -and -type f -print)\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(hoqDOCINSTALL) && find HIT/html -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	chmod +x $@

uninstall: uninstall_me.sh
	sh $<

.merlin:
	@echo 'FLG -rectypes' > .merlin
	@echo "B $(hoqLIB)kernel" >> .merlin
	@echo "B $(hoqLIB)lib" >> .merlin
	@echo "B $(hoqLIB)library" >> .merlin
	@echo "B $(hoqLIB)parsing" >> .merlin
	@echo "B $(hoqLIB)pretyping" >> .merlin
	@echo "B $(hoqLIB)interp" >> .merlin
	@echo "B $(hoqLIB)printing" >> .merlin
	@echo "B $(hoqLIB)intf" >> .merlin
	@echo "B $(hoqLIB)proofs" >> .merlin
	@echo "B $(hoqLIB)tactics" >> .merlin
	@echo "B $(hoqLIB)tools" >> .merlin
	@echo "B $(hoqLIB)ltacprof" >> .merlin
	@echo "B $(hoqLIB)toplevel" >> .merlin
	@echo "B $(hoqLIB)stm" >> .merlin
	@echo "B $(hoqLIB)grammar" >> .merlin
	@echo "B $(hoqLIB)config" >> .merlin
	@echo "B $(hoqLIB)ltac" >> .merlin
	@echo "B $(hoqLIB)engine" >> .merlin

clean::
	rm -f $(OBJFILES) $(OBJFILES:.o=.native) $(NATIVEFILES)
	find . -name .hoq-native -type d -empty -delete
	rm -f $(VOFILES) $(VOFILES:.vo=.vio) $(GFILES) $(VFILES:.v=.v.d) $(VFILES:=.beautified) $(VFILES:=.old)
	rm -f all.ps all-gal.ps all.pdf all-gal.pdf all.glob $(VFILES:.v=.glob) $(VFILES:.v=.tex) $(VFILES:.v=.g.tex) all-mli.tex
	- rm -rf html mlihtml uninstall_me.sh

cleanall:: clean
	rm -f $(patsubst %.v,.%.aux,$(VFILES))

archclean::
	rm -f *.cmx *.o

printenv:
	@"$(hoqBIN)hoqtop" -config
	@echo 'OCAMLFIND =	$(OCAMLFIND)'
	@echo 'PP =	$(PP)'
	@echo 'hoqFLAGS =	$(hoqFLAGS)'
	@echo 'hoqLIBINSTALL =	$(hoqLIBINSTALL)'
	@echo 'hoqDOCINSTALL =	$(hoqDOCINSTALL)'

Makefile: Make
	mv -f $@ $@.bak
	"$(hoqBIN)hoq_makefile" -f $< -o $@


###################
#                 #
# Implicit rules. #
#                 #
###################

$(VOFILES): %.vo: %.v
	$(SHOW)hoqC $<
	$(HIDE)$(hoqC) $(hoqDEBUG) $(hoqFLAGS) $<

$(GLOBFILES): %.glob: %.v
	$(hoqC) $(hoqDEBUG) $(hoqFLAGS) $<

$(VFILES:.v=.vio): %.vio: %.v
	$(hoqC) -quick $(hoqDEBUG) $(hoqFLAGS) $<

$(GFILES): %.g: %.v
	$(GALLINA) $<

$(VFILES:.v=.tex): %.tex: %.v
	$(hoqDOC) $(hoqDOCFLAGS) -latex $< -o $@

$(HTMLFILES): %.html: %.v %.glob
	$(hoqDOC) $(hoqDOCFLAGS) -html $< -o $@

$(VFILES:.v=.g.tex): %.g.tex: %.v
	$(hoqDOC) $(hoqDOCFLAGS) -latex -g $< -o $@

$(GHTMLFILES): %.g.html: %.v %.glob
	$(hoqDOC) $(hoqDOCFLAGS)  -html -g $< -o $@

$(addsuffix .d,$(VFILES)): %.v.d: %.v
	$(SHOW)'hoqDEP $<'
	$(HIDE)$(hoqDEP) $(hoqLIBS) "$<" > "$@" || ( RV=$$?; rm -f "$@"; exit $${RV} )

$(addsuffix .beautified,$(VFILES)): %.v.beautified:
	$(hoqC) $(hoqDEBUG) $(hoqFLAGS) -beautify $*.v

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

